Gtk-fortran & PLplot
====================

In this directory there are a few examples of using the plplot library
(http://plplot.sourceforge.net/) in conjunction with gtk-fortran.

Plplot is a scientific graphics library that has a Fortran 95 binding.

Requirements
------------

gtk-fortran: (including for these examples the high-level modules gtk_hl
and gtk_draw_hl), gtk2 or gtk3 should work. It is easiest to build the
examples if gtk-fortran and its pkg-config file are installed on your
system.

plplot: including the fortran95 bindings and the cairo drivers. They
are tested with the current release -- 5.9.7.

Concept
-------

The example codes here use the "extcairo" or the "memcairo" driver in
plplot to write to the backing pixbuf of a gtk drawable created by
hl_gtk_drawing_area_new.

The typical program structure is summarized as:

Main:
	Create the gtk widgets, including a drawing area.
	Realize the widget heirarchy
	Call the PLplot drawing routine(s)
	Enter the event loop

Handlers:
	Handle events and if needed, call the PLplot drawing routine(s)
	with updated settings.

PLplot drawing:
        Connect plplot's output to the pixbuf (see below).
       	Make the plot(s)
       	call gtk_widget_queue_draw on the drawing area to force a
        redraw.

Globals:
	For convenience in both examples I've put all the gtk use
	statements and any global variables into a separate module that
	can be used by all of the other units.

Connecting PLplot's output to the pixbuf.

This is done differently according to the driver in use:

extcairo: 

For the extcairo driver, output is to an externally greated cairo
context. So here you need to create a cairo context connected to the
pixbuf (this is most easily done with hl_gtk_pixbuf_cairo_new). And
then use pl_cmd to connect plplot's output to the context.  To do this
the following code needs to precede the call to plinit (or plstar):

    ! Get a cairo context from the drawing area.
    cc = hl_gtk_pixbuf_cairo_new(area, key)

    !  Initialize plplot
    call plsdev("extcairo")

    ! By default the "extcairo" driver does not reset the background
    ! This is equivalent to the command line option "-drvopt set_background=1"
    call plsetopt("drvopt", "set_background=1")  

    ! The "extcairo" device doesn't read the size from the context.
    write(geometry, "(I0,'x',I0)") width, height
    call plsetopt("geometry",  geometry)

And then after plinit you need:

   call pl_cmd(PLESC_DEVINIT, cc)

A fortran interface to pl_cmd is provided by the plplot_extras module
in this directory.

memcairo:

The memcairo driver sends output to an arbitrary area of memory, which
can be the pixels of a gdk pixbuf. A typical setup code might be
(before plinit):

    !  Initialize plplot
    call plsdev("memcairo")

    pixbuf = g_object_get_data(area, "backing-pixbuf")
    width = gdk_pixbuf_get_width(pixbuf)
    height = gdk_pixbuf_get_height(pixbuf)
    pixels = gdk_pixbuf_get_pixels(pixbuf)
    call c_f_pointer(pixels, fpixels, (/ width*height*3 /))
    call plsmem(width, height, fpixels)

This method has some limitations which are not present in the extcairo
method:

The plsmema routine is missing from the fortran95 bindings in plplot, so
transparency is not supported until that is fixed. There is a simple
patch to fix this (included in this directory as plplot_plsmema.pat, I
have submitted it to the plplot bug tracker so I hope that it will be
included in the next release). If this patch is applied then you can
have transparency, however transparency is not used in the memcairo
examples.

Because of the way in which a gdk pixbuf stores its pixels compared
with how plplot writes to a memory buffer, the window width must be a
multiple of 4 pixels. For pixbufs and memory mappings with transparency
this limitation does not apply.

Building the examples
---------------------

The plplot example(s) are most easily built if gtk-fortran has been
installed. Then it is simply a matter of:

    gfortran -o hl_plplot hl_plplot.f90 `pkg-config --cflags --libs \
    	     gtk-fortran plplotd-f95`

A basic Makefile to do this is provided.

The examples are derived from the Fortran95 versions of Examples 1, 8
and 30 on the PLplot web site. The examples with an "e" at the end of
the name use the extcairo device, the ones without use the memcairo
device.

Other known issues
------------------

Different releases of gfortran (let alone different fortran compilers)
cannot read each other's module files, therefore plplot must be built
with the same compiler as gtk-fortran. Since not many Linux distros use
gcc/gfortran 4.6 yet, this means you will probably need to build plplot
from source. In addition the x86_64 gfortran binary snapshots for 4.6 &
4.7 fail to build the C++ parts of plplot, unless you remove the c++
compiler binaries/links from the snapshot directory (I tried forcing
the c++ compiler to be /usr/bin/c++ with ccmake but I couldn't get it
to stick).
