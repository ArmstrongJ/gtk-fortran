Gtk-fortran & PLplot
====================

In this directory there are a few examples of using the plplot library
(http://plplot.sourceforge.net/) in conjunction with gtk-fortran.

Plplot is a scientific graphics library that has a Fortran 95 binding.

Requirements
------------

gtk-fortran: (including for these examples the high-level modules gtk_hl
and gtk_draw_hl), gtk2 or gtk3 should work. It is easiest to build the
examples if gtk-fortran and its pkg-config file are installed on your
system.

plplot: including the fortran95 bindings and the cairo drivers. They
are tested with the current release -- 5.9.7.

Concept
-------

The example codes here use the "extcairo" driver in plplot to write to
the backing surface of a gtk drawable created by
hl_gtk_drawing_area_new.

The typical program structure is summarized as:

Main:
	Create the gtk widgets, including a drawing area.
	Realize the widget heirarchy
	Call the PLplot drawing routine(s)
	Enter the event loop

Handlers:
	Handle events and if needed, call the PLplot drawing routine(s)
	with updated settings.

PLplot drawing:
        Connect plplot's output to the backing surface (see below).
       	Make the plot(s)
       	call gtk_widget_queue_draw on the drawing area to force a
        redraw.

Globals:
	For convenience in both examples I've put all the gtk use
	statements and any global variables into a separate module that
	can be used by all of the other units.

Connecting PLplot's output to the pixbuf.

For the extcairo driver, output is to an externally greated cairo
context. So here you need to create a cairo context connected to the
backing surface (this is most easily done with
hl_gtk_drawing_area_cairo_new). And then use pl_cmd to connect plplot's
output to the context.  To do this the following code needs to precede
the call to plinit (or plstar):

    ! Get a cairo context from the drawing area.
    cc = hl_gtk_drawing_area_cairo_new(area)

    !  Initialize plplot
    call plsdev("extcairo")

    ! By default the "extcairo" driver does not reset the background
    ! This is equivalent to the command line option "-drvopt set_background=1"
    call plsetopt("drvopt", "set_background=1")  

    ! The "extcairo" device doesn't read the size from the context.
    write(geometry, "(I0,'x',I0)") width, height
    call plsetopt("geometry",  geometry)

And then after plinit you need:

   call pl_cmd(PLESC_DEVINIT, cc)

A fortran interface to pl_cmd is provided by the plplot_extras module
in this directory.


Building the examples
---------------------

The plplot example(s) are most easily built if gtk-fortran has been
installed. Then it is simply a matter of:

    gfortran -o hl_plplot<x> hl_plplot<x>.f90 `pkg-config --cflags --libs \
    	     gtk-fortran plplotd-f95`

where <x> is the number of the example. A basic Makefile to do this is
provided.

The examples are derived from the Fortran95 versions of Examples 1, 8,
30 and 17 on the PLplot web site.

hl_plplot1e: Basic x-y plots on multiple pages
hl_plplot8e: 3-D data display
hl_plplot17e: Strip charts, shows continuous updating
hl_plplot30e: Transparency.

Known issues
------------

Different releases of gfortran (let alone different fortran compilers)
cannot read each other's module files, therefore plplot must be built
with the same compiler as gtk-fortran. Since not many Linux distros use
gcc/gfortran 4.6 yet, this means you will probably need to build plplot
from source. In addition the x86_64 gfortran binary snapshots for 4.6 &
4.7 fail to build the C++ parts of plplot, unless you remove the c++
compiler binaries/links from the snapshot directory (I tried forcing
the c++ compiler to be /usr/bin/c++ with ccmake but I couldn't get it
to stick).

Since the modifications to the high-level drawing routines, it is no
longer possible to use the "memcairo" device to capture cairo output
into a pixbuf (but that was somewhat of a kludge anyway).
